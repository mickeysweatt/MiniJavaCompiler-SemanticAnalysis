//
// Generated by JTB 1.3.2
//

package syntaxtree;

/**
 * Grammar production:
 * nodeToken -> "class"
 * identifier -> Identifier()
 * nodeToken1 -> "{"
 * nodeToken2 -> "public"
 * nodeToken3 -> "static"
 * nodeToken4 -> "void"
 * nodeToken5 -> "main"
 * nodeToken6 -> "("
 * nodeToken7 -> "String"
 * nodeToken8 -> "["
 * nodeToken9 -> "]"
 * identifier1 -> Identifier()
 * nodeToken10 -> ")"
 * nodeToken11 -> "{"
 * nodeListOptional -> ( VarDeclaration() )*
 * nodeListOptional1 -> ( Statement() )*
 * nodeToken12 -> "}"
 * nodeToken13 -> "}"
 */
public class MainClass implements Node {
   public NodeToken nodeToken;
   public Identifier identifier;
   public NodeToken nodeToken1;
   public NodeToken nodeToken2;
   public NodeToken nodeToken3;
   public NodeToken nodeToken4;
   public NodeToken nodeToken5;
   public NodeToken nodeToken6;
   public NodeToken nodeToken7;
   public NodeToken nodeToken8;
   public NodeToken nodeToken9;
   public Identifier identifier1;
   public NodeToken nodeToken10;
   public NodeToken nodeToken11;
   public NodeListOptional nodeListOptional;
   public NodeListOptional nodeListOptional1;
   public NodeToken nodeToken12;
   public NodeToken nodeToken13;

   public MainClass(NodeToken n0, Identifier n1, NodeToken n2, NodeToken n3, NodeToken n4, NodeToken n5, NodeToken n6, NodeToken n7, NodeToken n8, NodeToken n9, NodeToken n10, Identifier n11, NodeToken n12, NodeToken n13, NodeListOptional n14, NodeListOptional n15, NodeToken n16, NodeToken n17) {
      nodeToken = n0;
      identifier = n1;
      nodeToken1 = n2;
      nodeToken2 = n3;
      nodeToken3 = n4;
      nodeToken4 = n5;
      nodeToken5 = n6;
      nodeToken6 = n7;
      nodeToken7 = n8;
      nodeToken8 = n9;
      nodeToken9 = n10;
      identifier1 = n11;
      nodeToken10 = n12;
      nodeToken11 = n13;
      nodeListOptional = n14;
      nodeListOptional1 = n15;
      nodeToken12 = n16;
      nodeToken13 = n17;
   }

   public MainClass(Identifier n0, Identifier n1, NodeListOptional n2, NodeListOptional n3) {
      nodeToken = new NodeToken("class");
      identifier = n0;
      nodeToken1 = new NodeToken("{");
      nodeToken2 = new NodeToken("public");
      nodeToken3 = new NodeToken("static");
      nodeToken4 = new NodeToken("void");
      nodeToken5 = new NodeToken("main");
      nodeToken6 = new NodeToken("(");
      nodeToken7 = new NodeToken("String");
      nodeToken8 = new NodeToken("[");
      nodeToken9 = new NodeToken("]");
      identifier1 = n1;
      nodeToken10 = new NodeToken(")");
      nodeToken11 = new NodeToken("{");
      nodeListOptional = n2;
      nodeListOptional1 = n3;
      nodeToken12 = new NodeToken("}");
      nodeToken13 = new NodeToken("}");
   }

   public void accept(visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

