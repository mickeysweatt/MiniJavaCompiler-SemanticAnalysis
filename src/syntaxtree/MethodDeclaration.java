//
// Generated by JTB 1.3.2
//

package syntaxtree;

/**
 * Grammar production:
 * nodeToken -> "public"
 * type -> Type()
 * identifier -> Identifier()
 * nodeToken1 -> "("
 * nodeOptional -> ( FormalParameterList() )?
 * nodeToken2 -> ")"
 * nodeToken3 -> "{"
 * nodeListOptional -> ( VarDeclaration() )*
 * nodeListOptional1 -> ( Statement() )*
 * nodeToken4 -> "return"
 * expression -> Expression()
 * nodeToken5 -> ";"
 * nodeToken6 -> "}"
 */
public class MethodDeclaration implements Node {
   public NodeToken nodeToken;
   public Type type;
   public Identifier identifier;
   public NodeToken nodeToken1;
   public NodeOptional nodeOptional;
   public NodeToken nodeToken2;
   public NodeToken nodeToken3;
   public NodeListOptional nodeListOptional;
   public NodeListOptional nodeListOptional1;
   public NodeToken nodeToken4;
   public Expression expression;
   public NodeToken nodeToken5;
   public NodeToken nodeToken6;

   public MethodDeclaration(NodeToken n0, Type n1, Identifier n2, NodeToken n3, NodeOptional n4, NodeToken n5, NodeToken n6, NodeListOptional n7, NodeListOptional n8, NodeToken n9, Expression n10, NodeToken n11, NodeToken n12) {
      nodeToken = n0;
      type = n1;
      identifier = n2;
      nodeToken1 = n3;
      nodeOptional = n4;
      nodeToken2 = n5;
      nodeToken3 = n6;
      nodeListOptional = n7;
      nodeListOptional1 = n8;
      nodeToken4 = n9;
      expression = n10;
      nodeToken5 = n11;
      nodeToken6 = n12;
   }

   public MethodDeclaration(Type n0, Identifier n1, NodeOptional n2, NodeListOptional n3, NodeListOptional n4, Expression n5) {
      nodeToken = new NodeToken("public");
      type = n0;
      identifier = n1;
      nodeToken1 = new NodeToken("(");
      nodeOptional = n2;
      nodeToken2 = new NodeToken(")");
      nodeToken3 = new NodeToken("{");
      nodeListOptional = n3;
      nodeListOptional1 = n4;
      nodeToken4 = new NodeToken("return");
      expression = n5;
      nodeToken5 = new NodeToken(";");
      nodeToken6 = new NodeToken("}");
   }

   public void accept(visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

