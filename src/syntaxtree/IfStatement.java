//
// Generated by JTB 1.3.2
//

package syntaxtree;

/**
 * Grammar production:
 * nodeToken -> "if"
 * nodeToken1 -> "("
 * expression -> Expression()
 * nodeToken2 -> ")"
 * statement -> Statement()
 * nodeToken3 -> "else"
 * statement1 -> Statement()
 */
public class IfStatement implements Node {
   public NodeToken nodeToken;
   public NodeToken nodeToken1;
   public Expression expression;
   public NodeToken nodeToken2;
   public Statement statement;
   public NodeToken nodeToken3;
   public Statement statement1;

   public IfStatement(NodeToken n0, NodeToken n1, Expression n2, NodeToken n3, Statement n4, NodeToken n5, Statement n6) {
      nodeToken = n0;
      nodeToken1 = n1;
      expression = n2;
      nodeToken2 = n3;
      statement = n4;
      nodeToken3 = n5;
      statement1 = n6;
   }

   public IfStatement(Expression n0, Statement n1, Statement n2) {
      nodeToken = new NodeToken("if");
      nodeToken1 = new NodeToken("(");
      expression = n0;
      nodeToken2 = new NodeToken(")");
      statement = n1;
      nodeToken3 = new NodeToken("else");
      statement1 = n2;
   }

   public void accept(visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

