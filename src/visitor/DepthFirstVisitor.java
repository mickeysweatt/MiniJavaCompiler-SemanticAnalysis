//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class DepthFirstVisitor implements Visitor {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public void visit(NodeList n) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         e.nextElement().accept(this);
   }

   public void visit(NodeListOptional n) {
      if ( n.present() )
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
            e.nextElement().accept(this);
   }

   public void visit(NodeOptional n) {
      if ( n.present() )
         n.node.accept(this);
   }

   public void visit(NodeSequence n) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         e.nextElement().accept(this);
   }

   public void visit(NodeToken n) { }

   //
   // User-generated visitor methods below
   //

   /**
    * mainClass -> MainClass()
    * nodeListOptional -> ( TypeDeclaration() )*
    * nodeToken -> <EOF>
    */
   public void visit(Goal n) {
      n.mainClass.accept(this);
      n.nodeListOptional.accept(this);
      n.nodeToken.accept(this);
   }

   /**
    * nodeToken -> "class"
    * identifier -> Identifier()
    * nodeToken1 -> "{"
    * nodeToken2 -> "public"
    * nodeToken3 -> "static"
    * nodeToken4 -> "void"
    * nodeToken5 -> "main"
    * nodeToken6 -> "("
    * nodeToken7 -> "String"
    * nodeToken8 -> "["
    * nodeToken9 -> "]"
    * identifier1 -> Identifier()
    * nodeToken10 -> ")"
    * nodeToken11 -> "{"
    * nodeListOptional -> ( VarDeclaration() )*
    * nodeListOptional1 -> ( Statement() )*
    * nodeToken12 -> "}"
    * nodeToken13 -> "}"
    */
   public void visit(MainClass n) {
      n.nodeToken.accept(this);
      n.identifier.accept(this);
      n.nodeToken1.accept(this);
      n.nodeToken2.accept(this);
      n.nodeToken3.accept(this);
      n.nodeToken4.accept(this);
      n.nodeToken5.accept(this);
      n.nodeToken6.accept(this);
      n.nodeToken7.accept(this);
      n.nodeToken8.accept(this);
      n.nodeToken9.accept(this);
      n.identifier1.accept(this);
      n.nodeToken10.accept(this);
      n.nodeToken11.accept(this);
      n.nodeListOptional.accept(this);
      n.nodeListOptional1.accept(this);
      n.nodeToken12.accept(this);
      n.nodeToken13.accept(this);
   }

   /**
    * nodeChoice -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public void visit(TypeDeclaration n) {
      n.nodeChoice.accept(this);
   }

   /**
    * nodeToken -> "class"
    * identifier -> Identifier()
    * nodeToken1 -> "{"
    * nodeListOptional -> ( VarDeclaration() )*
    * nodeListOptional1 -> ( MethodDeclaration() )*
    * nodeToken2 -> "}"
    */
   public void visit(ClassDeclaration n) {
      n.nodeToken.accept(this);
      n.identifier.accept(this);
      n.nodeToken1.accept(this);
      n.nodeListOptional.accept(this);
      n.nodeListOptional1.accept(this);
      n.nodeToken2.accept(this);
   }

   /**
    * nodeToken -> "class"
    * identifier -> Identifier()
    * nodeToken1 -> "extends"
    * identifier1 -> Identifier()
    * nodeToken2 -> "{"
    * nodeListOptional -> ( VarDeclaration() )*
    * nodeListOptional1 -> ( MethodDeclaration() )*
    * nodeToken3 -> "}"
    */
   public void visit(ClassExtendsDeclaration n) {
      n.nodeToken.accept(this);
      n.identifier.accept(this);
      n.nodeToken1.accept(this);
      n.identifier1.accept(this);
      n.nodeToken2.accept(this);
      n.nodeListOptional.accept(this);
      n.nodeListOptional1.accept(this);
      n.nodeToken3.accept(this);
   }

   /**
    * type -> Type()
    * identifier -> Identifier()
    * nodeToken -> ";"
    */
   public void visit(VarDeclaration n) {
      n.type.accept(this);
      n.identifier.accept(this);
      n.nodeToken.accept(this);
   }

   /**
    * nodeToken -> "public"
    * type -> Type()
    * identifier -> Identifier()
    * nodeToken1 -> "("
    * nodeOptional -> ( FormalParameterList() )?
    * nodeToken2 -> ")"
    * nodeToken3 -> "{"
    * nodeListOptional -> ( VarDeclaration() )*
    * nodeListOptional1 -> ( Statement() )*
    * nodeToken4 -> "return"
    * expression -> Expression()
    * nodeToken5 -> ";"
    * nodeToken6 -> "}"
    */
   public void visit(MethodDeclaration n) {
      n.nodeToken.accept(this);
      n.type.accept(this);
      n.identifier.accept(this);
      n.nodeToken1.accept(this);
      n.nodeOptional.accept(this);
      n.nodeToken2.accept(this);
      n.nodeToken3.accept(this);
      n.nodeListOptional.accept(this);
      n.nodeListOptional1.accept(this);
      n.nodeToken4.accept(this);
      n.expression.accept(this);
      n.nodeToken5.accept(this);
      n.nodeToken6.accept(this);
   }

   /**
    * formalParameter -> FormalParameter()
    * nodeListOptional -> ( FormalParameterRest() )*
    */
   public void visit(FormalParameterList n) {
      n.formalParameter.accept(this);
      n.nodeListOptional.accept(this);
   }

   /**
    * type -> Type()
    * identifier -> Identifier()
    */
   public void visit(FormalParameter n) {
      n.type.accept(this);
      n.identifier.accept(this);
   }

   /**
    * nodeToken -> ","
    * formalParameter -> FormalParameter()
    */
   public void visit(FormalParameterRest n) {
      n.nodeToken.accept(this);
      n.formalParameter.accept(this);
   }

   /**
    * nodeChoice -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public void visit(Type n) {
      n.nodeChoice.accept(this);
   }

   /**
    * nodeToken -> "int"
    * nodeToken1 -> "["
    * nodeToken2 -> "]"
    */
   public void visit(ArrayType n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.nodeToken2.accept(this);
   }

   /**
    * nodeToken -> "boolean"
    */
   public void visit(BooleanType n) {
      n.nodeToken.accept(this);
   }

   /**
    * nodeToken -> "int"
    */
   public void visit(IntegerType n) {
      n.nodeToken.accept(this);
   }

   /**
    * nodeChoice -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public void visit(Statement n) {
      n.nodeChoice.accept(this);
   }

   /**
    * nodeToken -> "{"
    * nodeListOptional -> ( Statement() )*
    * nodeToken1 -> "}"
    */
   public void visit(Block n) {
      n.nodeToken.accept(this);
      n.nodeListOptional.accept(this);
      n.nodeToken1.accept(this);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "="
    * expression -> Expression()
    * nodeToken1 -> ";"
    */
   public void visit(AssignmentStatement n) {
      n.identifier.accept(this);
      n.nodeToken.accept(this);
      n.expression.accept(this);
      n.nodeToken1.accept(this);
   }

   /**
    * identifier -> Identifier()
    * nodeToken -> "["
    * expression -> Expression()
    * nodeToken1 -> "]"
    * nodeToken2 -> "="
    * expression1 -> Expression()
    * nodeToken3 -> ";"
    */
   public void visit(ArrayAssignmentStatement n) {
      n.identifier.accept(this);
      n.nodeToken.accept(this);
      n.expression.accept(this);
      n.nodeToken1.accept(this);
      n.nodeToken2.accept(this);
      n.expression1.accept(this);
      n.nodeToken3.accept(this);
   }

   /**
    * nodeToken -> "if"
    * nodeToken1 -> "("
    * expression -> Expression()
    * nodeToken2 -> ")"
    * statement -> Statement()
    * nodeToken3 -> "else"
    * statement1 -> Statement()
    */
   public void visit(IfStatement n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.expression.accept(this);
      n.nodeToken2.accept(this);
      n.statement.accept(this);
      n.nodeToken3.accept(this);
      n.statement1.accept(this);
   }

   /**
    * nodeToken -> "while"
    * nodeToken1 -> "("
    * expression -> Expression()
    * nodeToken2 -> ")"
    * statement -> Statement()
    */
   public void visit(WhileStatement n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.expression.accept(this);
      n.nodeToken2.accept(this);
      n.statement.accept(this);
   }

   /**
    * nodeToken -> "System.out.println"
    * nodeToken1 -> "("
    * expression -> Expression()
    * nodeToken2 -> ")"
    * nodeToken3 -> ";"
    */
   public void visit(PrintStatement n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.expression.accept(this);
      n.nodeToken2.accept(this);
      n.nodeToken3.accept(this);
   }

   /**
    * nodeChoice -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public void visit(Expression n) {
      n.nodeChoice.accept(this);
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "&&"
    * primaryExpression1 -> PrimaryExpression()
    */
   public void visit(AndExpression n) {
      n.primaryExpression.accept(this);
      n.nodeToken.accept(this);
      n.primaryExpression1.accept(this);
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "<"
    * primaryExpression1 -> PrimaryExpression()
    */
   public void visit(CompareExpression n) {
      n.primaryExpression.accept(this);
      n.nodeToken.accept(this);
      n.primaryExpression1.accept(this);
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "+"
    * primaryExpression1 -> PrimaryExpression()
    */
   public void visit(PlusExpression n) {
      n.primaryExpression.accept(this);
      n.nodeToken.accept(this);
      n.primaryExpression1.accept(this);
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "-"
    * primaryExpression1 -> PrimaryExpression()
    */
   public void visit(MinusExpression n) {
      n.primaryExpression.accept(this);
      n.nodeToken.accept(this);
      n.primaryExpression1.accept(this);
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "*"
    * primaryExpression1 -> PrimaryExpression()
    */
   public void visit(TimesExpression n) {
      n.primaryExpression.accept(this);
      n.nodeToken.accept(this);
      n.primaryExpression1.accept(this);
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "["
    * primaryExpression1 -> PrimaryExpression()
    * nodeToken1 -> "]"
    */
   public void visit(ArrayLookup n) {
      n.primaryExpression.accept(this);
      n.nodeToken.accept(this);
      n.primaryExpression1.accept(this);
      n.nodeToken1.accept(this);
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "."
    * nodeToken1 -> "length"
    */
   public void visit(ArrayLength n) {
      n.primaryExpression.accept(this);
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
   }

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "."
    * identifier -> Identifier()
    * nodeToken1 -> "("
    * nodeOptional -> ( ExpressionList() )?
    * nodeToken2 -> ")"
    */
   public void visit(MessageSend n) {
      n.primaryExpression.accept(this);
      n.nodeToken.accept(this);
      n.identifier.accept(this);
      n.nodeToken1.accept(this);
      n.nodeOptional.accept(this);
      n.nodeToken2.accept(this);
   }

   /**
    * expression -> Expression()
    * nodeListOptional -> ( ExpressionRest() )*
    */
   public void visit(ExpressionList n) {
      n.expression.accept(this);
      n.nodeListOptional.accept(this);
   }

   /**
    * nodeToken -> ","
    * expression -> Expression()
    */
   public void visit(ExpressionRest n) {
      n.nodeToken.accept(this);
      n.expression.accept(this);
   }

   /**
    * nodeChoice -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public void visit(PrimaryExpression n) {
      n.nodeChoice.accept(this);
   }

   /**
    * nodeToken -> <INTEGER_LITERAL>
    */
   public void visit(IntegerLiteral n) {
      n.nodeToken.accept(this);
   }

   /**
    * nodeToken -> "true"
    */
   public void visit(TrueLiteral n) {
      n.nodeToken.accept(this);
   }

   /**
    * nodeToken -> "false"
    */
   public void visit(FalseLiteral n) {
      n.nodeToken.accept(this);
   }

   /**
    * nodeToken -> <IDENTIFIER>
    */
   public void visit(Identifier n) {
      n.nodeToken.accept(this);
   }

   /**
    * nodeToken -> "this"
    */
   public void visit(ThisExpression n) {
      n.nodeToken.accept(this);
   }

   /**
    * nodeToken -> "new"
    * nodeToken1 -> "int"
    * nodeToken2 -> "["
    * expression -> Expression()
    * nodeToken3 -> "]"
    */
   public void visit(ArrayAllocationExpression n) {
      n.nodeToken.accept(this);
      n.nodeToken1.accept(this);
      n.nodeToken2.accept(this);
      n.expression.accept(this);
      n.nodeToken3.accept(this);
   }

   /**
    * nodeToken -> "new"
    * identifier -> Identifier()
    * nodeToken1 -> "("
    * nodeToken2 -> ")"
    */
   public void visit(AllocationExpression n) {
      n.nodeToken.accept(this);
      n.identifier.accept(this);
      n.nodeToken1.accept(this);
      n.nodeToken2.accept(this);
   }

   /**
    * nodeToken -> "!"
    * expression -> Expression()
    */
   public void visit(NotExpression n) {
      n.nodeToken.accept(this);
      n.expression.accept(this);
   }

   /**
    * nodeToken -> "("
    * expression -> Expression()
    * nodeToken1 -> ")"
    */
   public void visit(BracketExpression n) {
      n.nodeToken.accept(this);
      n.expression.accept(this);
      n.nodeToken1.accept(this);
   }

}
