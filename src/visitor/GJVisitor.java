//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * All GJ visitors must implement this interface.
 */

public interface GJVisitor<R,A> {

   //
   // GJ Auto class visitors
   //

   public R visit(NodeList n, A argu);
   public R visit(NodeListOptional n, A argu);
   public R visit(NodeOptional n, A argu);
   public R visit(NodeSequence n, A argu);
   public R visit(NodeToken n, A argu);

   //
   // User-generated visitor methods below
   //

   /**
    * mainClass -> MainClass()
    * nodeListOptional -> ( TypeDeclaration() )*
    * nodeToken -> <EOF>
    */
   public R visit(Goal n, A argu);

   /**
    * nodeToken -> "class"
    * identifier -> Identifier()
    * nodeToken1 -> "{"
    * nodeToken2 -> "public"
    * nodeToken3 -> "static"
    * nodeToken4 -> "void"
    * nodeToken5 -> "main"
    * nodeToken6 -> "("
    * nodeToken7 -> "String"
    * nodeToken8 -> "["
    * nodeToken9 -> "]"
    * identifier1 -> Identifier()
    * nodeToken10 -> ")"
    * nodeToken11 -> "{"
    * nodeListOptional -> ( VarDeclaration() )*
    * nodeListOptional1 -> ( Statement() )*
    * nodeToken12 -> "}"
    * nodeToken13 -> "}"
    */
   public R visit(MainClass n, A argu);

   /**
    * nodeChoice -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu);

   /**
    * nodeToken -> "class"
    * identifier -> Identifier()
    * nodeToken1 -> "{"
    * nodeListOptional -> ( VarDeclaration() )*
    * nodeListOptional1 -> ( MethodDeclaration() )*
    * nodeToken2 -> "}"
    */
   public R visit(ClassDeclaration n, A argu);

   /**
    * nodeToken -> "class"
    * identifier -> Identifier()
    * nodeToken1 -> "extends"
    * identifier1 -> Identifier()
    * nodeToken2 -> "{"
    * nodeListOptional -> ( VarDeclaration() )*
    * nodeListOptional1 -> ( MethodDeclaration() )*
    * nodeToken3 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu);

   /**
    * type -> Type()
    * identifier -> Identifier()
    * nodeToken -> ";"
    */
   public R visit(VarDeclaration n, A argu);

   /**
    * nodeToken -> "public"
    * type -> Type()
    * identifier -> Identifier()
    * nodeToken1 -> "("
    * nodeOptional -> ( FormalParameterList() )?
    * nodeToken2 -> ")"
    * nodeToken3 -> "{"
    * nodeListOptional -> ( VarDeclaration() )*
    * nodeListOptional1 -> ( Statement() )*
    * nodeToken4 -> "return"
    * expression -> Expression()
    * nodeToken5 -> ";"
    * nodeToken6 -> "}"
    */
   public R visit(MethodDeclaration n, A argu);

   /**
    * formalParameter -> FormalParameter()
    * nodeListOptional -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu);

   /**
    * type -> Type()
    * identifier -> Identifier()
    */
   public R visit(FormalParameter n, A argu);

   /**
    * nodeToken -> ","
    * formalParameter -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu);

   /**
    * nodeChoice -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu);

   /**
    * nodeToken -> "int"
    * nodeToken1 -> "["
    * nodeToken2 -> "]"
    */
   public R visit(ArrayType n, A argu);

   /**
    * nodeToken -> "boolean"
    */
   public R visit(BooleanType n, A argu);

   /**
    * nodeToken -> "int"
    */
   public R visit(IntegerType n, A argu);

   /**
    * nodeChoice -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu);

   /**
    * nodeToken -> "{"
    * nodeListOptional -> ( Statement() )*
    * nodeToken1 -> "}"
    */
   public R visit(Block n, A argu);

   /**
    * identifier -> Identifier()
    * nodeToken -> "="
    * expression -> Expression()
    * nodeToken1 -> ";"
    */
   public R visit(AssignmentStatement n, A argu);

   /**
    * identifier -> Identifier()
    * nodeToken -> "["
    * expression -> Expression()
    * nodeToken1 -> "]"
    * nodeToken2 -> "="
    * expression1 -> Expression()
    * nodeToken3 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu);

   /**
    * nodeToken -> "if"
    * nodeToken1 -> "("
    * expression -> Expression()
    * nodeToken2 -> ")"
    * statement -> Statement()
    * nodeToken3 -> "else"
    * statement1 -> Statement()
    */
   public R visit(IfStatement n, A argu);

   /**
    * nodeToken -> "while"
    * nodeToken1 -> "("
    * expression -> Expression()
    * nodeToken2 -> ")"
    * statement -> Statement()
    */
   public R visit(WhileStatement n, A argu);

   /**
    * nodeToken -> "System.out.println"
    * nodeToken1 -> "("
    * expression -> Expression()
    * nodeToken2 -> ")"
    * nodeToken3 -> ";"
    */
   public R visit(PrintStatement n, A argu);

   /**
    * nodeChoice -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu);

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "&&"
    * primaryExpression1 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu);

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "<"
    * primaryExpression1 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu);

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "+"
    * primaryExpression1 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu);

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "-"
    * primaryExpression1 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu);

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "*"
    * primaryExpression1 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu);

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "["
    * primaryExpression1 -> PrimaryExpression()
    * nodeToken1 -> "]"
    */
   public R visit(ArrayLookup n, A argu);

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "."
    * nodeToken1 -> "length"
    */
   public R visit(ArrayLength n, A argu);

   /**
    * primaryExpression -> PrimaryExpression()
    * nodeToken -> "."
    * identifier -> Identifier()
    * nodeToken1 -> "("
    * nodeOptional -> ( ExpressionList() )?
    * nodeToken2 -> ")"
    */
   public R visit(MessageSend n, A argu);

   /**
    * expression -> Expression()
    * nodeListOptional -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu);

   /**
    * nodeToken -> ","
    * expression -> Expression()
    */
   public R visit(ExpressionRest n, A argu);

   /**
    * nodeChoice -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu);

   /**
    * nodeToken -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu);

   /**
    * nodeToken -> "true"
    */
   public R visit(TrueLiteral n, A argu);

   /**
    * nodeToken -> "false"
    */
   public R visit(FalseLiteral n, A argu);

   /**
    * nodeToken -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu);

   /**
    * nodeToken -> "this"
    */
   public R visit(ThisExpression n, A argu);

   /**
    * nodeToken -> "new"
    * nodeToken1 -> "int"
    * nodeToken2 -> "["
    * expression -> Expression()
    * nodeToken3 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu);

   /**
    * nodeToken -> "new"
    * identifier -> Identifier()
    * nodeToken1 -> "("
    * nodeToken2 -> ")"
    */
   public R visit(AllocationExpression n, A argu);

   /**
    * nodeToken -> "!"
    * expression -> Expression()
    */
   public R visit(NotExpression n, A argu);

   /**
    * nodeToken -> "("
    * expression -> Expression()
    * nodeToken1 -> ")"
    */
   public R visit(BracketExpression n, A argu);

}
